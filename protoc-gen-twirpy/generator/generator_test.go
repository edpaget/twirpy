package generator

import (
	"fmt"

	"testing"

	"github.com/stretchr/testify/assert"
)

func TestImportBuilder(t *testing.T) {
	testImportBuilder := newImportBuilder(map[string]string{
		"twirp.twitch.example.Hat":   "twirp/twitch/example/haberdasher.proto",
		"twirp.twitch.example.Price": "twirp/twitch/example/haberdasher.proto",
		"twirp.twitch.example.Color": "twirp/twitch/example_folder/haberdasher.proto",
		"twirp.twitch.example.Size":  "twirp/twitch/example/haberdasher_extension.proto",
	})

	testCases := []struct {
		typeToImport    string
		importKey       string
		qualifiedImport string
		expectedImport  *TwirpImport
	}{
		{
			typeToImport:    "twirp.twitch.example.Hat",
			importKey:       "twirp.twitch.example.haberdasher_pb2",
			qualifiedImport: "_haberdasher_pb2.Hat",
			expectedImport: &TwirpImport{
				From:   "twirp.twitch.example",
				Import: "haberdasher_pb2",
				Alias:  "_haberdasher_pb2",
			},
		},
		{
			typeToImport:    "twirp.twitch.example.Price",
			importKey:       "twirp.twitch.example.haberdasher_pb2",
			qualifiedImport: "_haberdasher_pb2.Price",
			expectedImport: &TwirpImport{
				From:   "twirp.twitch.example",
				Import: "haberdasher_pb2",
				Alias:  "_haberdasher_pb2",
			},
		},
		{
			typeToImport:    "twirp.twitch.example.Color",
			importKey:       "twirp.twitch.example_folder.haberdasher_pb2",
			qualifiedImport: "__haberdasher_pb2.Color",
			expectedImport: &TwirpImport{
				From:   "twirp.twitch.example_folder",
				Import: "haberdasher_pb2",
				Alias:  "__haberdasher_pb2",
			},
		},
		{
			typeToImport:    "twirp.twitch.example.Size",
			importKey:       "twirp.twitch.example.haberdasher_extension_pb2",
			qualifiedImport: "_haberdasher_extension_pb2.Size",
			expectedImport: &TwirpImport{
				From:   "twirp.twitch.example",
				Import: "haberdasher_extension_pb2",
				Alias:  "_haberdasher_extension_pb2",
			},
		},
	}

	for _, tc := range testCases {
		t.Run(fmt.Sprintf("Test type %s", tc.typeToImport), func(t *testing.T) {
			qualified, err := testImportBuilder.addImportAndQualify(tc.typeToImport)
			assert.NoError(t, err)
			assert.Equal(t, tc.qualifiedImport, qualified)
			assert.Equal(t, tc.expectedImport, testImportBuilder.imports[tc.importKey])
		})
	}
}

func TestGeneratePyiTemplate(t *testing.T) {
	testCases := []struct {
		name     string
		vars     *TwirpTemplateVariables
		expected string
	}{
		{
			name: "Test Pyi Template",
			vars: &TwirpTemplateVariables{
				FileName: "haberdasher.proto",
				Imports: []*TwirpImport{
					{
						From:   "twirp.twitch.example",
						Import: "haberdasher_pb2",
						Alias:  "_haberdasher_pb2",
					},
				},
				Services: []*TwirpService{
					{
						ServiceURL: "twirp.twitch.example.Haberdasher",
						Name:       "Haberdasher",
						Comment:    "Haberdasher can make hats for clients",
						Methods: []*TwirpMethod{
							{
								ServiceURL:      "twirp.twitch.example.Haberdasher",
								ServiceName:     "Haberdasher",
								Name:            "MakeHat",
								Comment:         "MakeHat produces a hat of mysterious, randomly-selected color!",
								Input:           "twirp.twitch.example.Size",
								Output:          "twirp.twitch.example.Hat",
								QualifiedInput:  "_haberdasher_pb2.Size",
								QualifiedOutput: "_haberdasher_pb2.Hat",
							},
						},
					},
				},
			},
			expected: `# -*- coding: utf-8 -*-
# Generated by https://github.com/verloop/twirpy/protoc-gen-twirpy.  DO NOT EDIT!
# source: haberdasher.proto

from typing import Protocol
from twirp.server import TwirpServer
from twirp.twitch.example import haberdasher_pb2 as _haberdasher_pb2

class HaberdasherServiceProtocol(Protocol):
	def MakeHat(self, request: _haberdasher_pb2.Size) -> _haberdasher_pb2.Hat: ...

class HaberdasherServer(TwirpServer):
	def __init__(self, *args, service: DataPlatformServiceProtocol, server_path_prefix: str = "/twirp"): ...
`,
		},
		{
			name: "Test Pyi Template",
			vars: &TwirpTemplateVariables{
				FileName: "haberdasher.proto",
				Imports: []*TwirpImport{
					{
						From:   "",
						Import: "haberdasher_pb2",
						Alias:  "_haberdasher_pb2",
					},
				},
				Services: []*TwirpService{
					{
						ServiceURL: "twirp.twitch.example.Haberdasher",
						Name:       "Haberdasher",
						Comment:    "Haberdasher can make hats for clients",
						Methods: []*TwirpMethod{
							{
								ServiceURL:      "twirp.twitch.example.Haberdasher",
								ServiceName:     "Haberdasher",
								Name:            "MakeHat",
								Comment:         "MakeHat produces a hat of mysterious, randomly-selected color!",
								Input:           "twirp.twitch.example.Size",
								Output:          "twirp.twitch.example.Hat",
								QualifiedInput:  "_haberdasher_pb2.Size",
								QualifiedOutput: "_haberdasher_pb2.Hat",
							},
						},
					},
				},
			},
			expected: `# -*- coding: utf-8 -*-
# Generated by https://github.com/verloop/twirpy/protoc-gen-twirpy.  DO NOT EDIT!
# source: haberdasher.proto

from typing import Protocol
from twirp.server import TwirpServer
import haberdasher_pb2 as _haberdasher_pb2

class HaberdasherServiceProtocol(Protocol):
	def MakeHat(self, request: _haberdasher_pb2.Size) -> _haberdasher_pb2.Hat: ...

class HaberdasherServer(TwirpServer):
	def __init__(self, *args, service: DataPlatformServiceProtocol, server_path_prefix: str = "/twirp"): ...
`,
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			resp, err := generatePyiFile(tc.vars)
			assert.NoError(t, err)
			assert.Equal(t, tc.expected, *resp.Content)
		})
	}
}
